name: CD Release & Deploy

on:
  push:
    tags:
      - 'v*.*.*'    # ej: v1.2.3

permissions:
  contents: write   # necesario para pushear a production desde Actions

concurrency:
  group: release-sync
  cancel-in-progress: true

jobs:
  # 1) Crear el Release de GitHub cuando se pushea un tag (v1.2.3)
  create-github-release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}          # v1.2.3
          release_name: Release ${{ github.ref_name }}
          body: |
            Nueva versión: ${{ github.ref_name }}
            Generado automáticamente.
          draft: false
          prerelease: false

  # 2) Adelantar la rama production hasta ese tag (fast-forward)
  promote-production:
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necesito historia completa para merge-base y ff-only

      - name: Configure git author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch branches
        run: |
          git fetch origin main production --prune

      - name: Guardrails - asegurar que el tag deriva de main
        run: |
          TAG="${GITHUB_REF_NAME}"
          if ! git merge-base --is-ancestor origin/main "$TAG"; then
            echo "El tag $TAG no es descendiente de main. Abortando sync."
            exit 1
          fi

      - name: Fast-forward production -> tag
        run: |
          TAG="${GITHUB_REF_NAME}"
          git checkout production
          git merge --ff-only "$TAG"
          git push origin production
